package com.example.lambda.recording;

import java.text.SimpleDateFormat;
import java.util.TimeZone;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClientBuilder;
import com.amazonaws.services.dynamodbv2.document.DynamoDB;
import com.amazonaws.services.dynamodbv2.document.Item;
import com.amazonaws.services.dynamodbv2.document.spec.PutItemSpec;
import com.amazonaws.services.dynamodbv2.model.ConditionalCheckFailedException;
import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestHandler;

public class PatientDataHandler implements RequestHandler<Document, String> {
    private DynamoDB dynamoDb;
    //private String DYNAMODB_TABLE_NAME = "CareRoom1";
    private String DYNAMODB_TABLE_NAME = "Room1DB";
    
    @Override
    public String handleRequest(Document input, Context context) {
        this.initDynamoDbClient();
        context.getLogger().log("Input: " + input);

        //return null;
        return persistData(input);
    }

    private String persistData(Document document) throws ConditionalCheckFailedException {

        // Epoch Conversion Code: https://www.epochconverter.com/
        SimpleDateFormat sdf = new SimpleDateFormat ( "yyyy-MM-dd HH:mm:ss");
        sdf.setTimeZone(TimeZone.getTimeZone("Asia/Seoul"));
        String timeString = sdf.format(new java.util.Date (document.timestamp*1000));

        //DB에 deviceId(호실), 시간, 이름, 장소, 심전도센서, timestamp 저장. 
        return this.dynamoDb.getTable(DYNAMODB_TABLE_NAME)
                .putItem(new PutItemSpec().withItem(new Item().withPrimaryKey("deviceId", document.current.state.reported.Room)
                        .withLong("time", document.timestamp)
                        .withString("Datatype", document.current.state.reported.Datatype)
                        .withString("Attached", document.current.state.reported.Attached)
                        .withString("DeviceName", document.current.state.reported.DeviceName)
                        .withString("Name", document.current.state.reported.Name)
                        .withString("Heart", document.current.state.reported.Heart)
                        .withString("List", document.current.state.reported.List)
                        .withString("ECGdata", document.current.state.reported.ECGdata)
                        .withString("timestamp",timeString)))
                .toString();
    }

    private void initDynamoDbClient() {
        AmazonDynamoDB client = AmazonDynamoDBClientBuilder.standard().withRegion("ap-northeast-2").build();

        this.dynamoDb = new DynamoDB(client);
    }

}

class Document {
    public Thing previous;       
    public Thing current;
    public long timestamp;
    public String device;       // AWS IoT에 등록된 사물 이름 
}

class Thing {
    public State state = new State();
    public long timestamp;
    public String clientToken;

    public class State {
        public Tag reported = new Tag();
        public Tag desired = new Tag();

        public class Tag {
           public String Datatype;
           public String Room;
            public String Attached;
            public String DeviceName;
            public String Name;
            public String Heart;
            public String List;
            public String ECGdata;
        }
    }
}